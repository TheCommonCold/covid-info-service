{"version":3,"sources":["components/TopBar.js","components/helpers.js","components/statistics/DoomBar.js","components/statistics/Vaccines.js","components/statistics/Charts.js","components/statistics/Landing.js","components/Root.js","reportWebVitals.js","i18n.js","index.js"],"names":["TopBar","Navbar","bg","variant","Brand","href","newOrOld","field","statsData","updateWarning","t","useTranslation","className","percentageDifference","value","Math","ceil","nameOfClass","content","doomCounterValue","steps","stepsProcessed","Array","length","keys","map","i","avg","indexOfLabeledPart","Infinity","findIndex","x","doomCounterValues","doomCounterlabels","_","max","floor","min","toString","labelCreator","insertThinSpace","number","replace","DoomBar","Jumbotron","Container","Row","Col","round","ProgressBar","now","label","style","width","size","population","Vaccines","useState","data","setData","useEffect","axios","get","then","response","features","attributes","vaccinated","zaszczepieni_finalnie","boosterDose","dawka_przypominajaca","DATA_SHOW","md","span","order","xs","SZCZEPIENIA_SUMA","SZCZEPIENIA_DZIENNIE","animated","dayjs","extend","customParseFormat","Charts","shownLimit","setShownLimit","toDayJs","today","rollingAverage","historicData","reduce","acc","sumPlusCurrentDay","sumOfLastSeven","ZAKAZENIA_DZIENNE","shownData","filter","day","diff","options","title","text","rangeSelector","verticalAlign","y","yAxis","xAxis","labels","format","type","series","name","valueOf","lg","onClick","highcharts","Highcharts","Landing","ReactGA","pageview","window","location","pathname","search","lastUpdateDate","lastCases","String","Root","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","resources","en","translation","pl","i18n","use","LanguageDetector","initReactI18next","init","fallbackLng","keySeparator","interpolation","escapeValue","initialize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b098ddc9.chunk.js","sourcesContent":["import {React} from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\n\r\nfunction TopBar() {\r\n\r\n  return (\r\n    <Navbar bg='primary' variant='dark' >\r\n      <Navbar.Brand href='/'>info-covid.pl</Navbar.Brand>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React from 'react'\r\nimport statsData from '../data/statsData.json'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nexport function newOrOld(field) {\r\n  return statsData['today'][field] || statsData['yesterday'][field]\r\n}\r\n\r\nexport function updateWarning(field) {\r\n  const { t } = useTranslation()\r\n  return !statsData['today'][field] ? <span className='adnotation text-danger m-0'>({t('outdatedValue')})</span> : <></>\r\n}\r\n\r\nexport function percentageDifference(field) {\r\n  if (statsData['today'][field]) {\r\n    const value = Math.ceil((statsData['today'][field] / statsData['yesterday'][field] - 1) * 10000) / 100\r\n    const { nameOfClass, content } =\r\n      value > 0\r\n        ? { nameOfClass: 'adnotation text-danger', content: `(${value}%↗)` }\r\n        : value === 0\r\n          ? { nameOfClass: 'adnotation text-secondary', content: '(-%)' }\r\n          : { nameOfClass: 'adnotation text-success', content: `(${value}%↘)` }\r\n    return <span className={nameOfClass}>{content}</span>\r\n  } else {\r\n    return <></>\r\n  }\r\n}\r\n\r\nfunction labelCreator(value, max) {\r\n  return (\r\n    <div>\r\n      {max\r\n        ? Math.floor(Math.min(value, max)).toString() + '/' + max.toString()\r\n        : (Math.ceil(value * 100) / 100).toString()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function doomCounterValue() {\r\n  const steps = [3800, 9400, 19000, 27000]\r\n  const stepsProcessed = [steps[0], ...[...Array(steps.length - 1).keys()].map((i) => steps[i + 1] - steps[i]), 4000]\r\n  const max = 31000 / 100\r\n\r\n  const avg = newOrOld('the_average')\r\n  const indexOfLabeledPart = [...steps, Infinity].findIndex((x) => x > avg)\r\n  const doomCounterValues = stepsProcessed.map(\r\n    (x, i) =>\r\n      (i < indexOfLabeledPart ? x : i === indexOfLabeledPart ? avg - (i > 0 ? steps[indexOfLabeledPart - 1] : 0) : 0) /\r\n      max,\r\n  )\r\n  const doomCounterlabels = stepsProcessed.map((_, i) =>\r\n    i === indexOfLabeledPart ? labelCreator(avg, i > 0 ? steps[i] : null) : '',\r\n  )\r\n  return [steps, stepsProcessed, max, doomCounterValues, doomCounterlabels, avg]\r\n}\r\n\r\nexport function insertThinSpace(number) {\r\n  return number.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '\\u2009')\r\n}\r\n","import React from 'react'\r\nimport { Jumbotron, Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport { doomCounterValue } from '../helpers'\r\nimport { FaTwitterSquare } from 'react-icons/fa'\r\nimport { updateWarning, newOrOld, percentageDifference } from '../helpers'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nfunction DoomBar() {\r\n  const { t } = useTranslation()\r\n  const [steps, stepsProcessed, max, doomCounterValues, doomCounterlabels] = doomCounterValue()\r\n  return (\r\n    <Jumbotron className='p-0 m-2' >\r\n      <div className='text-center'>\r\n        <h2>{t('colourfulRealmsRules')}</h2>\r\n      </div>\r\n      <Container className='text-center pt-2' >\r\n        <Row>\r\n          <Col>\r\n            <p className='font-weight-light'>\r\n              {t('averageNewCasesOverSevenDays')}\r\n              <b> {Math.round(newOrOld('the_average'))} {percentageDifference('the_average')}\r\n                {updateWarning('the_average')}\r\n              </b>\r\n            </p>\r\n            <ProgressBar className='bar'>\r\n              <ProgressBar className='color-green' now={doomCounterValues[0]} />\r\n              <ProgressBar className='color-yellow' now={doomCounterValues[1]} />\r\n              <ProgressBar className='color-red' now={doomCounterValues[2]} />\r\n              <ProgressBar className='color-purple' now={doomCounterValues[3]} />\r\n              <ProgressBar className='color-black' now={doomCounterValues[4]} />\r\n            </ProgressBar>\r\n            <ProgressBar className='light-bar'>\r\n              <ProgressBar className='color-light-green' now={stepsProcessed[0] / max} label={doomCounterlabels[0]} />\r\n              <div>\r\n                <span className='tooltiptext'>{steps[0]}</span>\r\n              </div>\r\n              <ProgressBar className='color-light-yellow' now={stepsProcessed[1] / max} label={doomCounterlabels[1]} />\r\n              <div>\r\n                <span className='tooltiptext'>{steps[1]}</span>\r\n              </div>\r\n              <ProgressBar className='color-light-red' now={stepsProcessed[2] / max} label={doomCounterlabels[2]} />\r\n              <div>\r\n                <span className='tooltiptext'>{steps[2]}</span>\r\n              </div>\r\n              <ProgressBar className='color-light-purple' now={stepsProcessed[3] / max} label={doomCounterlabels[3]} />\r\n              <div>\r\n                <span className='tooltiptext'>{steps[3]}</span>\r\n              </div>\r\n              <ProgressBar className='color-light-black' now={stepsProcessed[4] / max} label={doomCounterlabels[4]} />\r\n            </ProgressBar>\r\n            <Row className='m-0'>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[0] / max).toString() + '%', 'borderLeftStyle': 'dashed' }}>\r\n                <small>{t('greenRealmRules')}</small>\r\n              </div>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[1] / max).toString() + '%' }}>\r\n                <small>{t('yellowRealmRules')}</small>\r\n              </div>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[2] / max).toString() + '%' }}>\r\n                <small>{t('redRealmRules')}</small>\r\n              </div>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[3] / max).toString() + '%' }}>\r\n                <small>{t('violetRealmRules')}</small>\r\n              </div>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[4] / max).toString() + '%' }}>\r\n                <small>{t('blackRealmRules')}</small>\r\n              </div>\r\n            </Row>\r\n            <hr className='m-2' />\r\n            <small>{t('moreInfoAboutRealms')}</small>\r\n            <p><a href='https://twitter.com/PremierRP/status/1330078274987450369/photo/1'>{<FaTwitterSquare size={20} />}{t('PMChancellery')}</a></p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron >\r\n  )\r\n}\r\n\r\nexport default DoomBar\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Jumbotron, Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport { insertThinSpace } from '../helpers'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst population = 37_672_367\r\n\r\nfunction Vaccines() {\r\n  const { t } = useTranslation()\r\n  const [data, setData] = useState(null)\r\n\r\n  useEffect(() => {\r\n    axios.get('https://services-eu1.arcgis.com/zk7YlClTgerl62BY/arcgis/rest/services/widok_global_szczepienia_actual/FeatureServer/0/query?f=json&cacheHint=true&resultOffset=0&resultRecordCount=1&where=1%3D1&outFields=*&resultType=standard&returnGeometry=false&spatialRel=esriSpatialRelIntersects', {\r\n    }).then(response => {\r\n      if(response.data && response.data.features && response.data.features[0].attributes)\r\n        setData(response.data.features[0].attributes)\r\n    })\r\n  }, [])\r\n\r\n  if(!data)\r\n    return null\r\n  const vaccinated = Math.ceil((data.zaszczepieni_finalnie / population) * 10000) / 100\r\n  const boosterDose = Math.ceil((data.dawka_przypominajaca / population) * 10000) / 100\r\n  return (\r\n    <div>\r\n      <Jumbotron className='p-0 m-2' >\r\n        <div className='text-center'>\r\n          <h2>{t('vaccinations')}</h2>\r\n        </div>\r\n        <Container className='text-center pt-2' >\r\n          <Row>\r\n            <Col>\r\n              <p className='m-0'>{t('lastUpdate')} {data.DATA_SHOW}</p>\r\n              <hr className='m-2' />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 4, order: 1 }} xs={{ span: 6, order: 1 }} className='mb-3'>\r\n              <h6>{t('allVaxinations')}</h6>\r\n              <h4 className='m-0'>{insertThinSpace(data.SZCZEPIENIA_SUMA.toString())}</h4>\r\n            </Col>\r\n            <Col md={{ span: 4, order: 2 }} xs={{ span: 12, order: 3 }} className='mb-3'>\r\n              <h6>{t('vaccinated')}</h6>\r\n              <h4 className='m-0'>{insertThinSpace(data.zaszczepieni_finalnie.toString())}</h4>\r\n            </Col>\r\n            <Col md={{ span: 4, order: 3 }} xs={{ span: 6, order: 2 }} className='mb-3'>\r\n              <h6>{t('lastDayVaccinations')}</h6>\r\n              <h4 className='m-0'>{insertThinSpace(data.SZCZEPIENIA_DZIENNIE.toString())}</h4>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <hr className='m-2' />\r\n              <h5 className='m-0'>{t('levelOfVaxxinationInPoland')}</h5>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <ProgressBar className='bar mt-2'>\r\n                <ProgressBar className='color-purple' animated now={data.dawka_przypominajaca/population * 100} />\r\n                <ProgressBar className='color-green' now={(data.zaszczepieni_finalnie-(2*data.dawka_przypominajaca))/population * 100} />\r\n              </ProgressBar>\r\n              <ProgressBar className='light-bar black-font'>\r\n                <ProgressBar className='color-light percentage-label' now={100} label={t('boosterDose', { vaccinated: vaccinated, boosterDose: boosterDose })} />\r\n              </ProgressBar>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <small><span className='color-green text-white p-1'>{t('greenColour')}</span> - {t('greenColourExplanation')}</small>\r\n            </Col>\r\n            <Col>\r\n              <small><span className='color-purple text-white p-1'>{t('purpleColour')}</span> - {t('purpleColourExplanation')}</small>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <hr />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Vaccines\r\n","import React, { useState } from 'react'\nimport { Jumbotron, Container, Row, Col } from 'react-bootstrap'\nimport dayjs from 'dayjs'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport historicData from '../../data/historicData.json'\nimport { useTranslation } from 'react-i18next'\n\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\ndayjs.extend(customParseFormat)\n\nfunction Charts() {\n  const { t } = useTranslation()\n  const [shownLimit, setShownLimit] = useState(null)\n  const toDayJs = (x) => dayjs(x.DATA_SHOW, 'DD.MM.YYYY HH:mm')\n  const today = dayjs()\n  const { rollingAverage } = historicData.reduce(\n    (acc, x, i) => {\n      const sumPlusCurrentDay = acc.sumOfLastSeven + x.ZAKAZENIA_DZIENNE\n      if (i < 7) {\n        return {\n          rollingAverage: { ...acc.rollingAverage, [x.DATA_SHOW]: sumPlusCurrentDay / (i + 1) },\n          sumOfLastSeven: sumPlusCurrentDay,\n        }\n      } else {\n        const sumOfLastSeven = sumPlusCurrentDay - historicData[i - 7].ZAKAZENIA_DZIENNE\n        return {\n          rollingAverage: { ...acc.rollingAverage, [x.DATA_SHOW]: sumOfLastSeven / 7 },\n          sumOfLastSeven: sumOfLastSeven,\n        }\n      }\n    },\n    { rollingAverage: {}, sumOfLastSeven: 0 },\n  )\n\n  const shownData = !shownLimit\n    ? historicData\n    : historicData.filter((day) => today.diff(toDayJs(day), 'day') <= shownLimit)\n    \n  const options = {\n    title: {\n      text: '',\n    },\n    rangeSelector: {\n      verticalAlign: 'top',\n      x: 0,\n      y: 0,\n    },\n    yAxis: [\n      {\n        title: {\n          text: t('chartLabelNewCases'),\n        },\n      },\n    ],\n    xAxis: {\n      labels: {\n        format: '{value:%b %e}',\n      },\n      type: 'datetime',\n    },\n    series: [\n      {\n        name: t('chartLabelNewCases'),\n        data: shownData.map((day) => [toDayJs(day).valueOf(), day.ZAKAZENIA_DZIENNE]),\n      },\n      {\n        name: t('chartLabelRollingCases'),\n        data: shownData.map((day) => [toDayJs(day).valueOf(), rollingAverage[day.DATA_SHOW]]),\n      },\n    ],\n  }\n\n  return (\n    <Jumbotron className='p-0 m-2'>\n      <div className='text-center'>\n        <h2>{t('chartTitle')}</h2>\n      </div>\n      <Container className='text-center p-4'>\n        <Row>\n          <Col>\n            <div className='text-center'>\n              <h6>{t('dataRange')}</h6>\n              <div className='timeline-controls'>\n                <Container>\n                  <Row>\n                    {[\n                      [null, t('allData')],\n                      [365, t('lastYear')],\n                      [93, t('lastThreeMonths')],\n                      [31, t('lastMonth')],\n                      [7, t('lastWeek')],\n                    ].map(([value, label]) => (\n                      <Col lg={{ span: 2 }} md={{ span: 4 }} xs={{ span: 6 }} key={value}>\n                        <button\n                          className={shownLimit === value ? 'btn btn-primary' : 'btn btn-outline-primary'}\n                          onClick={() => {\n                            setShownLimit(value)\n                          }}\n                        >\n                          {label}\n                        </button>\n                      </Col>\n                    ))}\n                  </Row>\n                </Container>\n              </div>\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <HighchartsReact highcharts={Highcharts} options={options} />\n          </Col>\n        </Row>\n      </Container>\n    </Jumbotron>\n  )\n}\n\nexport default Charts\n","import React, { useEffect } from 'react'\nimport ReactGA from 'react-ga'\nimport { Jumbotron, Container, Row, Col, ProgressBar } from 'react-bootstrap'\nimport lastUpdateDate from '../../data/lastUpdateDate.json'\nimport { newOrOld, percentageDifference, updateWarning, insertThinSpace } from '../helpers'\nimport { FaTwitterSquare } from 'react-icons/fa'\nimport DoomBar from './DoomBar'\nimport Vaccines from './Vaccines'\nimport Charts from './Charts'\nimport { useTranslation } from 'react-i18next'\n\nfunction Landing() {\n  const { t } = useTranslation()\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search)\n  })\n\n  return (\n    <div>\n      <Vaccines/>\n      <Jumbotron className='p-0 m-2' >\n        <div className='text-center'>\n          <h2>{t('cases')}</h2>\n        </div>\n        <Container className='text-center pt-2' >\n          <Row>\n            <Col>\n              <p className='m-0'>{t('lastUpdate')} {lastUpdateDate.lastCases}</p>\n              <hr className='m-2' />\n            </Col>\n          </Row>\n          <Row>\n            <Col md={{ span: 4, order: 1 }} xs={{ span: 6, order: 1 }} className='mb-3'>\n              <h6>{t('newCases')}</h6>\n              <h4 className='m-0'>{insertThinSpace(newOrOld('new_cases_today'))}</h4>\n              {updateWarning('new_cases_today')}\n              {percentageDifference('new_cases_today')}\n            </Col>\n            <Col md={{ span: 4, order: 2 }} xs={{ span: 12, order: 3 }} className='mb-3'>\n              <h6>{t('activeCases')}</h6>\n              <h4 className='m-0'>{insertThinSpace(newOrOld('active_cases'))}</h4>\n              {updateWarning('active_cases')}\n              {percentageDifference('active_cases')}\n            </Col>\n            <Col md={{ span: 4, order: 3 }} xs={{ span: 6, order: 2 }} className='mb-3'>\n              <h6>{t('newDeaths')}</h6>\n              <h4 className='m-0'>{insertThinSpace(newOrOld('dead_all_today'))}</h4>\n              {updateWarning('dead_all_today')}\n              {percentageDifference('dead_all_today')}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <hr />\n            </Col>\n          </Row>\n          <Row>\n            <Col lg={{ span: 3, order: 1 }} md={{ span: 6, order: 1 }} xs={{ span: 6, order: 1 }}>\n              <h6>{t('numberOfTests')}</h6>\n              <Row>\n                <Col>\n                  <h4 className='m-0'>{newOrOld('tests_done_today')}</h4>\n                  <p className='m-0 p-0'><small className='text-muted font-weight-normal'>{t('positiveTestsPercentage', {number: newOrOld('percent_positive')})}</small></p>\n                  {updateWarning('tests_done_today')}\n                </Col>\n              </Row>\n              <br />\n            </Col>\n            <Col lg={{ span: 3, order: 2 }} md={{ span: 6, order: 3 }} xs={{ span: 6, order: 3 }}>\n              <h6>{t('takenRespirators')}</h6>\n              <h5>{insertThinSpace(newOrOld('occupied_respirator_count'))}/{insertThinSpace(newOrOld('respirator_count'))}</h5>\n              <ProgressBar variant='danger' animated\n                now={newOrOld('occupied_respirator_count') / newOrOld('respirator_count') * 100}\n                label={String(Math.floor(newOrOld('occupied_respirator_count') / newOrOld('respirator_count') * 100)) + '%'} />\n              {updateWarning('occupied_respirator_count')}\n            </Col>\n            <Col lg={{ span: 3, order: 3 }} md={{ span: 6, order: 4 }} xs={{ span: 6, order: 4 }}>\n              <h6>{t('takenBeds')}</h6>\n              <h5>{insertThinSpace(newOrOld('occupied_bed_count'))}/{insertThinSpace(newOrOld('bed_count'))}</h5>\n              <ProgressBar variant='danger' animated\n                now={newOrOld('occupied_bed_count') / newOrOld('bed_count') * 100}\n                label={String(Math.floor(newOrOld('occupied_bed_count') / newOrOld('bed_count') * 100)) + '%'} />\n              {updateWarning('occupied_bed_count')}\n            </Col>\n            <Col lg={{ span: 3, order: 4 }} md={{ span: 6, order: 2 }} xs={{ span: 6, order: 2 }}>\n              <h6>{t('allDeaths')}</h6>\n              <h4>{insertThinSpace(newOrOld('dead_global'))}</h4>\n              {updateWarning('dead_global')}\n              <br />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <hr className='m-2' />\n            </Col>\n          </Row>\n          <Row>\n            <Col className='mb-2'>\n              <small>{t('dataFrom')} <a href='https://twitter.com/MZ_GOV_PL'>{<FaTwitterSquare size={20} />}MZ_GOV_PL</a></small>\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n      <DoomBar />\n      {/* <Jumbotron className='p-0 m-2' >\n                <Container>\n                    <Row className='text-center'>\n                        <Col>\n                            <p className='m-0'>Aktualnie obowiązujące obostrzenia z dnia: {lastUpdateDate.lastRestrictions}</p>\n                        </Col>\n                    </Row>\n                    <Row className='m-0'>\n                        <Col className='p-0 m-2'>\n                            <Button className='restrictions-button p-0' block><Link to='/restrictions'><p className='m-2 text-white'>Zobacz obostrzenia</p></Link></Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </Jumbotron> */}\n      <Charts/>\n    </div >\n  )\n}\n\nexport default Landing\n","import React from 'react'\nimport TopBar from './TopBar'\nimport Landing from './statistics/Landing'\n\nfunction Root() {\n  return (\n    <>\n      <TopBar />\n      <Landing />\n    </>\n  )\n}\n\nexport default Root\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\nimport translationEN from './locales/en.json'\nimport translationPL from './locales/pl.json'\n\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  pl: {\n    translation: translationPL,\n  },\n}\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    fallbackLng: 'en',\n    keySeparator: true,\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  })\n\nexport default i18n\n","import ReactGA from 'react-ga'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport Root from './components/Root'\nimport reportWebVitals from './reportWebVitals'\nimport './i18n'\nReactGA.initialize('G-5J0BQEKJX3')\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}