{"version":3,"sources":["components/TopBar.js","components/restrictions/SingleRestriction.js","components/restrictions/RestrictionsList.js","components/restrictions/Restrictions.js","components/helpers.js","components/statistics/DoomBar.js","components/statistics/Vaccines.js","components/statistics/Charts.js","components/statistics/Landing.js","components/Root.js","reportWebVitals.js","index.js"],"names":["TopBar","Navbar","bg","variant","Brand","href","SingleRestriction","props","className","content","details","map","detail","RestrictionsList","Container","restrictions","category","Card","border","Header","Title","title","Body","restriction","Restrictions","useEffect","ReactGA","pageview","window","location","pathname","search","Jumbotron","fluid","Alert","Row","Col","RestrictionsData","newOrOld","field","statsData","updateWarning","percentageDifference","value","Math","ceil","nameOfClass","doomCounterValue","steps","stepsProcessed","Array","length","keys","i","avg","indexOfLabeledPart","Infinity","findIndex","x","doomCounterValues","doomCounterlabels","_","max","floor","min","toString","labelCreator","insertThinSpace","number","replace","DoomBar","round","ProgressBar","now","label","style","width","size","adultPopulation","Vaccines","useState","data","setData","console","log","axios","get","then","response","features","attributes","percentageToday","DAWKA_2_SUMA","percentageFuture","SZCZEPIENIA_SUMA","DATA_SHOW","md","span","order","xs","SZCZEPIENIA_DZIENNIE","animated","dayjs","extend","customParseFormat","Charts","options","text","rangeSelector","verticalAlign","y","yAxis","xAxis","labels","format","type","series","name","historicData","day","valueOf","ZAKAZENIA_DZIENNE","index","slice","reduce","a","b","highcharts","Highcharts","Landing","lastUpdateDate","lastCases","lg","String","Root","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1577f388.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\n\r\nfunction TopBar() {\r\n  return (\r\n    <Navbar bg='primary' variant='dark' >\r\n      <Navbar.Brand href='/'>info-covid.pl</Navbar.Brand>\r\n      {/* <Nav className='w-100 justify-content-end'>\r\n                <Link className='nav-link' to='/'>Statystyki</Link>\r\n                <Link className='nav-link' to='/restrictions'>Obostrzenia</Link>\r\n            </Nav> */}\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React from 'react'\r\n\r\nfunction SingleRestriction(props) {\r\n  return (\r\n    <li>\r\n      <p className='m-0'>{props.content}</p>\r\n      {props.details &&\r\n                <ul>\r\n                  {props.details.map(detail => {\r\n                    return <li key={detail} className='font-weight-light'>{<small>{detail}</small>}</li>\r\n                  })}\r\n                </ul>\r\n      }\r\n      <hr className='m-2' />\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default SingleRestriction\r\n","import React from 'react'\r\nimport { Card, Container } from 'react-bootstrap'\r\nimport SingleRestriction from './SingleRestriction'\r\n\r\nfunction RestrictionsList(props) {\r\n  return (\r\n    <Container className='p-0'>\r\n      {\r\n        props.restrictions.map(category => {\r\n          return (\r\n            <Card key={category.title} border='light'>\r\n              <Card.Header>\r\n                <Card.Title className='m-0'><h6 className='m-0'>{category.title}</h6></Card.Title>\r\n              </Card.Header>\r\n              <Card.Body className='p-1'>\r\n                <ul className='pl-4'>\r\n                  {category.restrictions.map(restriction => {\r\n                    return <SingleRestriction key={restriction.content} content={restriction.content} details={restriction.details} />\r\n                  })}\r\n                </ul>\r\n              </Card.Body>\r\n            </Card>\r\n          )\r\n        })\r\n      }\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default RestrictionsList\r\n","import React from 'react'\r\nimport ReactGA from 'react-ga'\r\nimport RestrictionsList from './RestrictionsList'\r\nimport { Jumbotron, Row, Col, Alert, Container } from 'react-bootstrap'\r\n// import { FaTwitterSquare } from 'react-icons/fa';\r\nimport RestrictionsData from '../../data/restrictions.json'\r\n// import UpcomingRestrictionsData from '../../data/upcomingRestrictions.json'\r\nimport { useEffect } from 'react'\r\n\r\nfunction Restrictions() {\r\n  useEffect(() => {\r\n    ReactGA.pageview(window.location.pathname + window.location.search)\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      {/* Commented out, as there are currentlył no new upcoming restrictions  */}\r\n\r\n      {/* <Jumbotron fluid className='m-0 pt-0'>\r\n                <Alert className='p-0 m-0' variant='danger'><h4 className='text-center'>Nadchodzące obostrzenia</h4></Alert>\r\n                <Container>\r\n                    <Row className='text-center'>\r\n                        <Col className='p-0'>\r\n                            <small>Na podstawie <a href='https://twitter.com/MZ_GOV_PL'>{<FaTwitterSquare size={20} />}MZ_GOV_PL</a></small>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <RestrictionsList restrictions={UpcomingRestrictionsData} />\r\n            </Jumbotron> */}\r\n      <Jumbotron fluid className=\"p-0 m-0\">\r\n        <Alert className=\"p-0 m-0 pt-1\" variant=\"info\">\r\n          <h4 className=\"text-center\">Aktualne obostrzenia</h4>\r\n        </Alert>\r\n        <Container>\r\n          <Row className=\"text-center\">\r\n            <Col className=\"p-0\">\r\n              <small>\r\n                Dokładny spis aktualnych zasad i ograniczeń znajdziesz na{' '}\r\n                <a href=\"https://www.gov.pl/web/koronawirus/aktualne-zasady-i-ograniczenia\">\r\n                  <b>gov.pl</b>\r\n                </a>\r\n              </small>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <RestrictionsList restrictions={RestrictionsData} />\r\n      </Jumbotron>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Restrictions\r\n","import React from 'react'\r\nimport statsData from '../data/statsData.json'\r\n\r\nexport function newOrOld(field) {\r\n  return statsData['today'][field] || statsData['yesterday'][field]\r\n}\r\n\r\nexport function updateWarning(field) {\r\n  return !statsData['today'][field] ? <span className='adnotation text-danger m-0'>(Wczorajsza wartość)</span> : <></>\r\n}\r\n\r\nexport function percentageDifference(field) {\r\n  if (statsData['today'][field]) {\r\n    const value = Math.ceil((statsData['today'][field] / statsData['yesterday'][field] - 1) * 10000) / 100\r\n    const { nameOfClass, content } =\r\n      value > 0\r\n        ? { nameOfClass: 'adnotation text-danger', content: `(${value}%↗)` }\r\n        : value === 0\r\n          ? { nameOfClass: 'adnotation text-secondary', content: '(-%)' }\r\n          : { nameOfClass: 'adnotation text-success', content: `(${value}%↘)` }\r\n    return <span className={nameOfClass}>{content}</span>\r\n  } else {\r\n    return <></>\r\n  }\r\n}\r\n\r\nfunction labelCreator(value, max) {\r\n  return (\r\n    <div>\r\n      {max\r\n        ? Math.floor(Math.min(value, max)).toString() + '/' + max.toString()\r\n        : (Math.ceil(value * 100) / 100).toString()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function doomCounterValue() {\r\n  const steps = [3800, 9400, 19000, 27000]\r\n  const stepsProcessed = [steps[0], ...[...Array(steps.length - 1).keys()].map((i) => steps[i + 1] - steps[i]), 4000]\r\n  const max = 31000 / 100\r\n\r\n  const avg = newOrOld('the_average')\r\n  const indexOfLabeledPart = [...steps, Infinity].findIndex((x) => x > avg)\r\n  const doomCounterValues = stepsProcessed.map(\r\n    (x, i) =>\r\n      (i < indexOfLabeledPart ? x : i === indexOfLabeledPart ? avg - (i > 0 ? steps[indexOfLabeledPart - 1] : 0) : 0) /\r\n      max,\r\n  )\r\n  const doomCounterlabels = stepsProcessed.map((_, i) =>\r\n    i === indexOfLabeledPart ? labelCreator(avg, i > 0 ? steps[i] : null) : '',\r\n  )\r\n  return [steps, stepsProcessed, max, doomCounterValues, doomCounterlabels, avg]\r\n}\r\n\r\nexport function insertThinSpace(number) {\r\n  return number.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '\\u2009')\r\n}\r\n","import React from 'react'\r\nimport { Jumbotron, Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport { doomCounterValue } from '../helpers'\r\nimport { FaTwitterSquare } from 'react-icons/fa'\r\nimport { updateWarning, newOrOld, percentageDifference } from '../helpers'\r\n\r\nfunction DoomBar() {\r\n  const [steps, stepsProcessed, max, doomCounterValues, doomCounterlabels] = doomCounterValue()\r\n  return (\r\n    <Jumbotron className='p-0 m-2' >\r\n      <div className='text-center'>\r\n        <h2>Etapy zasad bezpieczeństwa</h2>\r\n      </div>\r\n      <Container className='text-center pt-2' >\r\n        <Row>\r\n          <Col>\r\n            <p className='font-weight-light'>\r\n                            Średnia liczba nowych zakażeń przez ostatnie 7 dni:\r\n              <b> {Math.round(newOrOld('the_average'))} {percentageDifference('the_average')}\r\n                {updateWarning('the_average')}\r\n              </b>\r\n            </p>\r\n            <ProgressBar className='bar'>\r\n              <ProgressBar className='color-green' now={doomCounterValues[0]} />\r\n              <ProgressBar className='color-yellow' now={doomCounterValues[1]} />\r\n              <ProgressBar className='color-red' now={doomCounterValues[2]} />\r\n              <ProgressBar className='color-purple' now={doomCounterValues[3]} />\r\n              <ProgressBar className='color-black' now={doomCounterValues[4]} />\r\n            </ProgressBar>\r\n            <ProgressBar className='light-bar'>\r\n              <ProgressBar className='color-light-green' now={stepsProcessed[0] / max} label={doomCounterlabels[0]} />\r\n              <div>\r\n                <span className='tooltiptext'>{steps[0]}</span>\r\n              </div>\r\n              <ProgressBar className='color-light-yellow' now={stepsProcessed[1] / max} label={doomCounterlabels[1]} />\r\n              <div>\r\n                <span className='tooltiptext'>{steps[1]}</span>\r\n              </div>\r\n              <ProgressBar className='color-light-red' now={stepsProcessed[2] / max} label={doomCounterlabels[2]} />\r\n              <div>\r\n                <span className='tooltiptext'>{steps[2]}</span>\r\n              </div>\r\n              <ProgressBar className='color-light-purple' now={stepsProcessed[3] / max} label={doomCounterlabels[3]} />\r\n              <div>\r\n                <span className='tooltiptext'>{steps[3]}</span>\r\n              </div>\r\n              <ProgressBar className='color-light-black' now={stepsProcessed[4] / max} label={doomCounterlabels[4]} />\r\n            </ProgressBar>\r\n            <Row className='m-0'>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[0] / max).toString() + '%', 'border-left-style': 'dashed' }}>\r\n                <small>Regionalny podział na strefy</small>\r\n              </div>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[1] / max).toString() + '%' }}>\r\n                <small>Cała polska strefą żółtą, wybrane powiaty strefą czerwoną</small>\r\n              </div>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[2] / max).toString() + '%' }}>\r\n                <small>Cała polska strefą czerwoną</small>\r\n              </div>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[3] / max).toString() + '%' }}>\r\n                <small>Bezpiecznik/Faza odpowiedzialności</small>\r\n              </div>\r\n              <div className='bar-label d-md-inline d-lg-inline d-none' style={{ width: (stepsProcessed[4] / max).toString() + '%' }}>\r\n                <small>Kwarantanna narodowa</small>\r\n              </div>\r\n            </Row>\r\n            <hr className='m-2' />\r\n            <small>Więcej informacji o etapach zasad bezpieczeństwa:</small>\r\n            <p><a href='https://twitter.com/PremierRP/status/1330078274987450369/photo/1'>{<FaTwitterSquare size={20} />}Kancelaria Premiera</a></p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron >\r\n  )\r\n}\r\n\r\nexport default DoomBar\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Jumbotron, Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport { insertThinSpace } from '../helpers'\r\n\r\nconst adultPopulation = 32_495_000\r\n\r\nfunction Vaccines() {\r\n  const [data, setData] = useState(null)\r\n\r\n  useEffect(() => {\r\n    console.log('request')\r\n    axios.get('https://services-eu1.arcgis.com/zk7YlClTgerl62BY/arcgis/rest/services/global_szczepienia_actual_widok/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&resultOffset=0&resultRecordCount=1&resultType=standard&cacheHint=true', {\r\n    }).then(response => {\r\n      if(response.data && response.data.features && response.data.features[0].attributes)\r\n        setData(response.data.features[0].attributes)\r\n    })\r\n  }, [])\r\n\r\n  if(!data)\r\n    return null\r\n  const percentageToday = Math.ceil((data.DAWKA_2_SUMA / adultPopulation) * 10000) / 100\r\n  const percentageFuture = Math.ceil(((data.SZCZEPIENIA_SUMA - data.DAWKA_2_SUMA) / adultPopulation) * 10000) / 100\r\n  return (\r\n    <div>\r\n      <Jumbotron className='p-0 m-2' >\r\n        <div className='text-center'>\r\n          <h2>Szczepienia</h2>\r\n        </div>\r\n        <Container className='text-center pt-2' >\r\n          <Row>\r\n            <Col>\r\n              <p className='m-0'>Ostatnia aktualizacja: {data.DATA_SHOW}</p>\r\n              <hr className='m-2' />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 4, order: 1 }} xs={{ span: 6, order: 1 }} className='mb-3'>\r\n              <h6>Szczepienia ogółem:</h6>\r\n              <h4 className='m-0'>{insertThinSpace(data.SZCZEPIENIA_SUMA.toString())}</h4>\r\n            </Col>\r\n            <Col md={{ span: 4, order: 2 }} xs={{ span: 12, order: 3 }} className='mb-3'>\r\n              <h6>Drugie dawki ogółem:</h6>\r\n              <h4 className='m-0'>{insertThinSpace(data.DAWKA_2_SUMA.toString())}</h4>\r\n            </Col>\r\n            <Col md={{ span: 4, order: 3 }} xs={{ span: 6, order: 2 }} className='mb-3'>\r\n              <h6>Szczepienia w ciągu ostatniej doby:</h6>\r\n              <h4 className='m-0'>{insertThinSpace(data.SZCZEPIENIA_DZIENNIE.toString())}</h4>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <hr className='m-2' />\r\n              <h5 className='m-0'>Poziom zaszczepienia populacji Polski</h5>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <ProgressBar className='bar mt-2'>\r\n                <ProgressBar className='color-green' animated now={data.DAWKA_2_SUMA/adultPopulation * 100} />\r\n                <ProgressBar className='color-yellow' now={(data.SZCZEPIENIA_SUMA-(2*data.DAWKA_2_SUMA))/adultPopulation * 100} />\r\n              </ProgressBar>\r\n              <ProgressBar className='light-bar black-font'>\r\n                <ProgressBar className='color-light percentage-label' now={100} label={`${percentageToday}% (za 21 dni przewidujemy około ${percentageFuture}%)`} />\r\n              </ProgressBar>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <small><span className='color-green'>Kolor zielony</span> - część populacji zaszczepiona pierwszą oraz drugą dawką (tej wartości dotyczy procent)</small>\r\n            </Col>\r\n            <Col>\r\n              <small><span className='color-yellow'>Kolor żółty</span> - część populacji, która otrzymała tylko pierwszą dawkę</small>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <hr />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Vaccines\r\n","import React from 'react'\r\nimport { Jumbotron, Container, Row, Col } from 'react-bootstrap'\r\nimport dayjs from 'dayjs'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport historicData from '../../data/historicData.json'\r\n\r\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\r\ndayjs.extend(customParseFormat)\r\n\r\nfunction Charts() {\r\n  const options = {\r\n    title: {\r\n      text: '',\r\n    },\r\n    rangeSelector: {\r\n      verticalAlign: 'top',\r\n      x: 0,\r\n      y: 0\r\n    },\r\n    yAxis: [{\r\n      title: {\r\n        text: 'Liczba zakażeń'\r\n      },\r\n    }],\r\n    xAxis: {\r\n      labels: {\r\n        format: '{value:%b %e}'\r\n      },\r\n      type: 'datetime',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Liczba nowych zakażeń',\r\n        data: historicData.map((day) => [\r\n          dayjs(day.DATA_SHOW, 'DD.MM.YYYY HH:mm').valueOf(),\r\n          day.ZAKAZENIA_DZIENNE,\r\n        ]),\r\n      },\r\n      {\r\n        name: 'Średnia liczba zakażeń z 7 dni',\r\n        data: historicData.map((day, index) => [\r\n          dayjs(day.DATA_SHOW, 'DD.MM.YYYY HH:mm').valueOf(),\r\n          index < 7 ? 0 : (historicData.slice(index-7, index).map(x => x.ZAKAZENIA_DZIENNE).reduce((a, b) => a + b) / 7)\r\n        ]),\r\n      },\r\n    ],\r\n  }\r\n\r\n  return (\r\n    <Jumbotron className=\"p-0 m-2\">\r\n      <div className='text-center'>\r\n        <h2>Wykres nowych zakażeń</h2>\r\n      </div>\r\n      <Container className=\"text-center p-4\">\r\n        <Row>\r\n          <Col>\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","import React, { useEffect } from 'react'\nimport ReactGA from 'react-ga'\nimport { Jumbotron, Container, Row, Col, ProgressBar } from 'react-bootstrap'\nimport lastUpdateDate from '../../data/lastUpdateDate.json'\nimport { newOrOld, percentageDifference, updateWarning, insertThinSpace } from '../helpers'\nimport { FaTwitterSquare } from 'react-icons/fa'\nimport DoomBar from './DoomBar'\nimport Vaccines from './Vaccines'\nimport Charts from './Charts'\n\nfunction Landing() {\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search)\n  })\n\n  return (\n    <div>\n      <Vaccines/>\n      <Jumbotron className='p-0 m-2' >\n        <div className='text-center'>\n          <h2>Zachorowania</h2>\n        </div>\n        <Container className='text-center pt-2' >\n          <Row>\n            <Col>\n              <p className='m-0'>Ostatnia aktualizacja: {lastUpdateDate.lastCases}</p>\n              <hr className='m-2' />\n            </Col>\n          </Row>\n          <Row>\n            <Col md={{ span: 4, order: 1 }} xs={{ span: 6, order: 1 }} className='mb-3'>\n              <h6>Nowe zakażenia:</h6>\n              <h4 className='m-0'>{insertThinSpace(newOrOld('new_cases_today'))}</h4>\n              {updateWarning('new_cases_today')}\n              {percentageDifference('new_cases_today')}\n            </Col>\n            <Col md={{ span: 4, order: 2 }} xs={{ span: 12, order: 3 }} className='mb-3'>\n              <h6>Aktywne przypadki:</h6>\n              <h4 className='m-0'>{insertThinSpace(newOrOld('active_cases'))}</h4>\n              {updateWarning('active_cases')}\n              {percentageDifference('active_cases')}\n            </Col>\n            <Col md={{ span: 4, order: 3 }} xs={{ span: 6, order: 2 }} className='mb-3'>\n              <h6>Nowe zgony:</h6>\n              <h4 className='m-0'>{insertThinSpace(newOrOld('dead_all_today'))}</h4>\n              {updateWarning('dead_all_today')}\n              {percentageDifference('dead_all_today')}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <hr />\n            </Col>\n          </Row>\n          <Row>\n            <Col lg={{ span: 3, order: 1 }} md={{ span: 6, order: 1 }} xs={{ span: 6, order: 1 }}>\n              <h6>Liczba testów:</h6>\n              <Row>\n                <Col>\n                  <h4 className='m-0'>{newOrOld('tests_done_today')}</h4>\n                  <p className='m-0 p-0'><small className='text-muted font-weight-normal'>{newOrOld('percent_positive')} pozytywnych</small></p>\n                  {updateWarning('tests_done_today')}\n                </Col>\n              </Row>\n              <br />\n            </Col>\n            <Col lg={{ span: 3, order: 2 }} md={{ span: 6, order: 3 }} xs={{ span: 6, order: 3 }}>\n              <h6>Zajęte respiratory:</h6>\n              <h5>{insertThinSpace(newOrOld('occupied_respirator_count'))}/{insertThinSpace(newOrOld('respirator_count'))}</h5>\n              <ProgressBar variant='danger' animated\n                now={newOrOld('occupied_respirator_count') / newOrOld('respirator_count') * 100}\n                label={String(Math.floor(newOrOld('occupied_respirator_count') / newOrOld('respirator_count') * 100)) + '%'} />\n              {updateWarning('occupied_respirator_count')}\n            </Col>\n            <Col lg={{ span: 3, order: 3 }} md={{ span: 6, order: 4 }} xs={{ span: 6, order: 4 }}>\n              <h6>Zajęte łóżka:</h6>\n              <h5>{insertThinSpace(newOrOld('occupied_bed_count'))}/{insertThinSpace(newOrOld('bed_count'))}</h5>\n              <ProgressBar variant='danger' animated\n                now={newOrOld('occupied_bed_count') / newOrOld('bed_count') * 100}\n                label={String(Math.floor(newOrOld('occupied_bed_count') / newOrOld('bed_count') * 100)) + '%'} />\n              {updateWarning('occupied_bed_count')}\n            </Col>\n            <Col lg={{ span: 3, order: 4 }} md={{ span: 6, order: 2 }} xs={{ span: 6, order: 2 }}>\n              <h6>Zgony Łącznie:</h6>\n              <h4>{insertThinSpace(newOrOld('dead_global'))}</h4>\n              {updateWarning('dead_global')}\n              <br />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <hr className='m-2' />\n            </Col>\n          </Row>\n          <Row>\n            <Col className='mb-2'>\n              <small>Dane pobierane z <a href='https://twitter.com/MZ_GOV_PL'>{<FaTwitterSquare size={20} />}MZ_GOV_PL</a></small>\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n      <DoomBar />\n      {/* <Jumbotron className='p-0 m-2' >\n                <Container>\n                    <Row className='text-center'>\n                        <Col>\n                            <p className='m-0'>Aktualnie obowiązujące obostrzenia z dnia: {lastUpdateDate.lastRestrictions}</p>\n                        </Col>\n                    </Row>\n                    <Row className='m-0'>\n                        <Col className='p-0 m-2'>\n                            <Button className='restrictions-button p-0' block><Link to='/restrictions'><p className='m-2 text-white'>Zobacz obostrzenia</p></Link></Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </Jumbotron> */}\n      <Charts/>\n    </div >\n  )\n}\n\nexport default Landing\n","import React from 'react'\nimport TopBar from './TopBar'\nimport Restrictions from './restrictions/Restrictions'\nimport Landing from './statistics/Landing'\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from 'react-router-dom'\n\nfunction Root() {\n\n  return (\n    <HashRouter basename='/'>\n      <TopBar />\n      <Switch>\n        <Route path={process.env.PUBLIC_URL + '/restrictions'}>\n          <Restrictions />\n        </Route>\n        <Route path={process.env.PUBLIC_URL + '/statistics'}>\n          <Landing />\n        </Route>\n        <Route path={process.env.PUBLIC_URL + '/'}>\n          <Landing />\n        </Route>\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Root\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import ReactGA from 'react-ga'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport Root from './components/Root'\nimport reportWebVitals from './reportWebVitals'\n\nReactGA.initialize('G-5J0BQEKJX3')\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}